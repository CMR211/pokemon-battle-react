import { useState } from "react"
import axios from "axios"
import InfiniteScroll from "react-infinite-scroller"

import usePokemonColors from "../../utilities/usePokemonColors"

import IconHome from "../../icons/IconHome"
import IconReturn from "../../icons/IconReturn"
import IconLoader from "../../icons/IconLoader"

import { COLORS } from "../../utilities/COLORS"
import padZero from "../../utilities/padZero"
import capitalize from "../../utilities/capitalize"

export default function Pokedex() {
    const [pokemons, setPokemons] = useState([])
    const [nextPage, setNextPage] = useState("https://pokeapi.co/api/v2/pokemon/?offset=0&limit=40")
    const [pokemonColors, setPokemonColors] = useState(null)
    const [filteredPokemons, setFilteredPokemons] = useState([])
    const [inputValue, setInputValue] = useState("")

    // Fetch function for InfiniteScroll
    const fetchData = async (url) => {
        const { data } = await axios.get(url)
        const newPokemons = data.results.map((pokemon) => {
            // https://pokeapi.co/api/v2/pokemon/6/
            const id = pokemon.url.replace("https://pokeapi.co/api/v2/pokemon/", "").replace("/", "")
            return {
                id: id,
                name: pokemon.name,
                img: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`,
            }
        })
        setPokemons((prev) => {
            const ids = prev.map((i) => i.id)
            const toAdd = newPokemons.filter((newPokemon) => !ids.includes(newPokemon.id))
            return [...prev, ...toAdd]
        })
        setNextPage(data.next)
    }

    // Fetching pokemon colors for the backgrounds
    usePokemonColors(setPokemonColors)

    const filterPokemons = (e) => {
        const val = e.target.value
        setInputValue(val)
        const pks = pokemons.filter(pokemon =>  pokemon.name === val)
        console.log(pks)
        setFilteredPokemons(pks)
    }

    if (pokemonColors === null) return <IconLoader />
    return (
        <div className="pokedex">
            <div className="pokedex__nav">
                <button className="pokedex__nav__button--return pokedex__nav__button">
                    <IconReturn />
                </button>
                <button className="pokedex__nav__button--home pokedex__nav__button" onClick={() => {}}>
                    <IconHome />
                </button>
            </div>
            <div className="pokedex__hero">
                <h1>Pokedex</h1>
                <div>
                    <input type="text" onChange={filterPokemons} value={inputValue} />
                </div>
            </div>
            <div className="pokedex__list">
                <InfiniteScroll
                    pageStart={0}
                    loadMore={() => fetchData(nextPage)}
                    hasMore={nextPage === null ? false : true}
                    loader={
                        <div className="loader" key={0}>
                            <IconLoader />
                        </div>
                    }
                    useWindow={false}>
                    {filteredPokemons.map((pokemon) => {
                        const bgColor = pokemonColors.find((color) => color.id === pokemon.id).color
                        return (
                            <div
                                className="pokedex__pokemon"
                                style={{ "--bg-color": `rgba(${COLORS[bgColor].replace("rgb(", "").slice(0, -1)},1)` }}>
                                <div className="pokedex__pokemon__img-c">
                                    <img className="pokedex__pokemon__img-i" alt={pokemon.name} src={pokemon.img} />
                                </div>
                                <p className="pokedex__pokemon__name" style={bgColor === "white" ? { color: "inherit" } : {}}>
                                    {capitalize(pokemon.name)}
                                </p>
                                <p className="pokedex__pokemon__id" style={bgColor === "white" ? { color: "inherit" } : {}}>
                                    {padZero(pokemon.id)}
                                </p>
                            </div>
                        )
                    })}
                </InfiniteScroll>
            </div>
        </div>
    )
}
